import time
import requests
from flask import Flask, request
from pymongo import MongoClient
from datetime import datetime, timedelta
from dateutil.parser import parse
import threading

LINE_ACCESS_TOKEN = "LineToken"
MONGO_URI = "mongoDB uri"
DB_NAME = "mushroom_db"
COLLECTION_NAME = "mushroom_data"

app = Flask(__name__)

client = MongoClient(MONGO_URI)
collection = client[DB_NAME][COLLECTION_NAME]

# Quick Reply Buttons ‡∏õ‡∏∏‡πâ‡∏°‡∏Å‡∏î
QUICK_REPLY_ITEMS = [
    {"type": "action", "action": {"type": "message", "label": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡πá‡∏î", "text": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡πá‡∏î"}},
    {"type": "action", "action": {"type": "message", "label": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", "text": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"}},
    {"type": "action", "action": {"type": "message", "label": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", "text": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô"}},
    {"type": "action", "action": {"type": "message", "label": "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "text": "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"}},
]

def send_line_reply(reply_token, text):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply
    """
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [{
            "type": "text",
            "text": text,
            "quickReply": {"items": QUICK_REPLY_ITEMS}
        }]
    }
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"LINE reply status: {response.status_code} {response.text}")
    except Exception as e:
        print(f"Error sending LINE reply: {e}")

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("Received event:", data)

    for event in data.get("events", []):
        if event.get("type") == "message":
            user_text = event["message"]["text"].strip().lower()
            reply_token = event["replyToken"]

            if user_text == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡πá‡∏î":
                handle_status(reply_token)

            elif user_text in ["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô"]:
                handle_latest_env(reply_token, user_text)

            elif user_text in ["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"]:
                handle_env_history(reply_token, user_text)

            elif user_text == "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠":
                send_line_reply(reply_token, "‚òéÔ∏è ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: 0948741544")

            else:
                send_line_reply(reply_token,
                    "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
                    "- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡πá‡∏î\n"
                    "- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥\n"
                    "- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô\n"
                    "- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
                    "- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
                    "- ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
                )
    return "OK", 200

def handle_status(reply_token):
    timestamps = collection.distinct("timestamp")
    if not timestamps or len(timestamps) < 2:
        send_line_reply(reply_token, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡πá‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    timestamps_dt = sorted([parse(ts) for ts in timestamps], reverse=True)
    target_ts = timestamps_dt[1]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å timestamp ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    start_time = target_ts - timedelta(milliseconds=100)
    end_time = target_ts + timedelta(milliseconds=100)

    latest_docs = list(collection.find({
        "timestamp": {"$gte": start_time.isoformat(), "$lte": end_time.isoformat()}
    }))

    if not latest_docs:
        send_line_reply(reply_token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡πá‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
        return

    mature_count = sum(1 for doc in latest_docs if doc.get("maturity_status", "").lower() == "mature")
    immature_count = len(latest_docs) - mature_count

    total = mature_count + immature_count
    if total == 0:
        reply_text = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡πá‡∏î"
    elif mature_count == total:
        reply_text = f"üçÑ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å‡∏î‡∏≠‡∏Å\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {target_ts.strftime('%Y-%m-%d %H:%M:%S')}"
    else:
        reply_text = (
            f"üçÑ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö: {mature_count} ‡∏î‡∏≠‡∏Å\n"
            f"‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {immature_count} ‡∏î‡∏≠‡∏Å\n"
            f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {target_ts.strftime('%Y-%m-%d %H:%M:%S')}"
        )
    send_line_reply(reply_token, reply_text)

def handle_latest_env(reply_token, user_text):
    latest_doc = collection.find_one(sort=[("timestamp", -1)])
    if not latest_doc:
        send_line_reply(reply_token, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        return

    target_ts_str = latest_doc["timestamp"]
    target_ts = parse(target_ts_str)
    docs = list(collection.find({"timestamp": target_ts_str}))
    if not docs:
        send_line_reply(reply_token, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        return

    avg_temp = sum(float(doc.get("temperature_c", 0)) for doc in docs) / len(docs)
    avg_humidity = sum(float(doc.get("humidity_percent", 0)) for doc in docs) / len(docs)

    if user_text == "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥":
        reply_text = f"üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ({target_ts.strftime('%Y-%m-%d %H:%M:%S')}): {avg_temp:.2f}¬∞C"
    else:
        reply_text = f"üí¶ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ({target_ts.strftime('%Y-%m-%d %H:%M:%S')}): {avg_humidity:.2f}%"

    send_line_reply(reply_token, reply_text)

def handle_env_history(reply_token, user_text):
    now = datetime.utcnow()
    past_3_days = now - timedelta(days=3)

    docs = list(collection.find({
        "timestamp": {"$gte": past_3_days.isoformat(), "$lte": now.isoformat()}
    }))

    if not docs:
        send_line_reply(reply_token, f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•{user_text}‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏±‡∏ô")
        return

    if user_text == "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á":
        values = [float(doc.get("temperature_c", 0)) for doc in docs]
        metric_name = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)"
    else:
        values = [float(doc.get("humidity_percent", 0)) for doc in docs]
        metric_name = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)"

    avg_val = sum(values) / len(values)
    max_val = max(values)
    min_val = min(values)

    reply_text = (
        f"üìä {metric_name}‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏±‡∏ô\n"
        f"‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_val:.2f}\n"
        f"‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {max_val:.2f}\n"
        f"‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {min_val:.2f}"
    )
    send_line_reply(reply_token, reply_text)


# ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
TEMP_HIGH_THRESHOLD = 35.0
TEMP_LOW_THRESHOLD = 15.0
HUMIDITY_HIGH_THRESHOLD = 80.0
HUMIDITY_LOW_THRESHOLD = 50.0
ALERT_INTERVAL = 600  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥

last_alert_time = None

def send_line_broadcast(message_text):
    url = "https://api.line.me/v2/bot/message/broadcast"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    payload = {
        "messages": [{"type": "text", "text": message_text}]
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        print("LINE broadcast:", response.status_code, response.text)
    except Exception as e:
        print("‚ùå Error broadcasting to LINE:", e)

def check_environment():
    global last_alert_time
    while True:
        try:
            latest_doc = collection.find_one(sort=[("timestamp", -1)])
            if not latest_doc:
                print("‚ÑπÔ∏è No document found.")
                time.sleep(ALERT_INTERVAL)
                continue

            ts_str = latest_doc.get("timestamp")
            timestamp = parse(ts_str)
            if last_alert_time and (timestamp - last_alert_time).total_seconds() < ALERT_INTERVAL:
                time.sleep(ALERT_INTERVAL)
                continue

            temp = float(latest_doc.get("temperature_c", 0))
            humidity = float(latest_doc.get("humidity_percent", 0))

            alerts = []

            if temp > TEMP_HIGH_THRESHOLD:
                alerts.append(f"üî• ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô {TEMP_HIGH_THRESHOLD}¬∞C\nüå°Ô∏è ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {temp:.1f}¬∞C")
            elif temp < TEMP_LOW_THRESHOLD:
                alerts.append(f"‚ùÑÔ∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô {TEMP_LOW_THRESHOLD}¬∞C\nüå°Ô∏è ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {temp:.1f}¬∞C")

            if humidity > HUMIDITY_HIGH_THRESHOLD:
                alerts.append(f"üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô {HUMIDITY_HIGH_THRESHOLD}%\nüí¶ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {humidity:.1f}%")
            elif humidity < HUMIDITY_LOW_THRESHOLD:
                alerts.append(f"üå´Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô {HUMIDITY_LOW_THRESHOLD}%\nüí¶ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {humidity:.1f}%")

            if alerts:
                msg = "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n\n" + "\n\n".join(alerts) + f"\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
                send_line_broadcast(msg)
                last_alert_time = timestamp

        except Exception as e:
            print("‚ùå Error in check_environment:", e)

        time.sleep(ALERT_INTERVAL)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ò‡∏£‡∏î background ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
threading.Thread(target=check_environment, daemon=True).start()

if __name__ == "__main__":
    app.run(debug=True, port=5050)
